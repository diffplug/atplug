plugins {
	id 'com.diffplug.blowdryer'
	id 'com.diffplug.spotless-changelog'
}

repositories { mavenCentral() }

spotlessChangelog {
	forceNextVersion '1.0.0'
}

group = 干.proj('maven_group', 'the maven group, recommend com.diffplug')
allprojects {
	apply from: 干.file('base/changelog.gradle')
}
apply from: 干.file('base/sonatype.gradle')

String VER_JUNIT_JUPITER = '5.9.1'
subprojects {
	apply from: 干.file('base/java8.gradle')
	apply from: 干.file('base/kotlin.gradle')
	apply from: 干.file('spotless/java.gradle')
	apply plugin: 'java-library'

	repositories { mavenCentral() }

	dependencies {
		testImplementation "org.junit.jupiter:junit-jupiter-api:${VER_JUNIT_JUPITER}"
		testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${VER_JUNIT_JUPITER}"
	}

	ext.kotlin_jvmTarget = '1.8'
	if (it.name == 'atplug-runtime') {
		ext.maven_name = 'AtPlug runtime'
		apply plugin: 'kotlinx-serialization'
		dependencies {
			implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:1.4.1"
		}
	} else if (it.name == 'atplug-test-harness') {
		ext.maven_name='AtPlug test harness'
		dependencies {
			compileOnly "org.junit.jupiter:junit-jupiter-api:5.0.0"
			implementation "org.jetbrains.kotlin:kotlin-reflect:1.8.0"
			implementation project(':atplug-runtime')
		}
	} else if (it.name == 'atplug-plugin-gradle') {
		ext.maven_name='AtPlug metadata generation Gradle plugin'
		apply from: 干.file('base/gradle-plugin.gradle')
		dependencies {
			implementation "org.ow2.asm:asm:9.4"
			implementation 'com.diffplug.gradle:goomph:3.40.0'
			testImplementation 'org.assertj:assertj-core:3.23.1'
		}
		tasks.named('test') {
			dependsOn ':atplug-runtime:jar', ':atplug-runtime:testClasses'
		}
	} else {
		throw new IllegalArgumentException("Unexpected project " + it.name)
	}
	ext.maven_desc = ext.maven_name

	tasks.named('test', Test) {
		useJUnitPlatform {}
	}

	// it all needs to get published and formatted
	apply from: 干.file('base/maven.gradle')
	apply from: 干.file('base/sonatype.gradle')
}
